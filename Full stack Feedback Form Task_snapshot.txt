# Code Repository Snapshot: Full stack Feedback Form Task

--------------------------------------------
Generated with reposnap v1.3.0
Project: https://github.com/akhshyganesh/reposnap#readme
Author: akhshyganesh
Generated on: 11/6/2025 at 7:26:09 pm
--------------------------------------------


üìÅ Backend/
  üìÑ index.js
    ---
    const express = require("express")
    const cors = require("cors")
    
    const app = express()
    const PORT = 3000
    
    app.use(cors())
    
    //Middleware
    app.use(express.json())
    
    const feedbacks = [] // Temp Storage
    
    app.post("/api/feedback", (req,res) => {
        const {name, email, rating, feedback } = req.body
    
        if(!name || !email || !rating || !feedback) {
            return res.status(400).json({message : "All Fileds are Required"})
        }
    
        const newFeedback = {name, email, rating, feedback, submittedAt: new Date() }
        feedbacks.push(newFeedback)
    
        console.log("Feedback Received:", newFeedback)
    
        res.status(200).json({message: "Feedback Sumbitted Successfully"})
    })
    
    app.get("/api/feedbacks", (req,res) => {
        res.json(feedbacks)
    })
    
    app.listen(PORT,()=>{
        console.log("Server Started...")
    })
    ---

üìÅ Frontend/
  üìÑ README.md
    ---
    # React + Vite
    
    This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.
    
    Currently, two official plugins are available:
    
    - [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
    - [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
    
    ## Expanding the ESLint configuration
    
    If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
    
    ---

  üìÑ eslint.config.js
    ---
    import js from '@eslint/js'
    import globals from 'globals'
    import reactHooks from 'eslint-plugin-react-hooks'
    import reactRefresh from 'eslint-plugin-react-refresh'
    
    export default [
      { ignores: ['dist'] },
      {
        files: ['**/*.{js,jsx}'],
        languageOptions: {
          ecmaVersion: 2020,
          globals: globals.browser,
          parserOptions: {
            ecmaVersion: 'latest',
            ecmaFeatures: { jsx: true },
            sourceType: 'module',
          },
        },
        plugins: {
          'react-hooks': reactHooks,
          'react-refresh': reactRefresh,
        },
        rules: {
          ...js.configs.recommended.rules,
          ...reactHooks.configs.recommended.rules,
          'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
          'react-refresh/only-export-components': [
            'warn',
            { allowConstantExport: true },
          ],
        },
      },
    ]
    
    ---

  üìÑ index.html
    ---
    <!doctype html>
    <html lang="en">
    
    <head>
      <meta charset="UTF-8" />
      <link rel="icon" type="image/svg+xml" href="./src/assets/logo.png" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>Feedback Form with Node</title>
    </head>
    
    <body>
      <div id="root"></div>
     
      <script type="module" src="/src/main.jsx"></script>
    </body>
    
    </html>
    ---

  üìÅ public/
  üìÅ src/
    üìÑ App.css
      ---
      
      ---

    üìÑ App.jsx
      ---
      import React from 'react';
      import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
      import FeedbackForm from './pages/FeedbackForm';
      import SuccessPage from './pages/SuccessPage';
      import FeedbackList from './pages/FeedbackList';
      
      function App() {
        return (
          <Router>
            <Routes>
              <Route path="/" element={<FeedbackForm />} />
              <Route path="/success" element={<SuccessPage />} />
              <Route path="/feedbacks" element={<FeedbackList />} />
            </Routes>
          </Router>
        );
      }
      
      export default App;
      ---

    üìÅ assets/
    üìÑ index.css
      ---
      @import "tailwindcss";
      ---

    üìÑ main.jsx
      ---
      import { StrictMode } from 'react'
      import React from 'react'
      import { createRoot } from 'react-dom/client'
      import './index.css'
      import App from './App.jsx'
      
      createRoot(document.getElementById('root')).render(
        <StrictMode>
          <App />
        </StrictMode>,
      )
      
      ---

    üìÅ pages/
      üìÑ FeedbackForm.jsx
        ---
        import React, { useState } from 'react';
        import axios from 'axios';
        import { useNavigate } from 'react-router-dom';
        
        function FeedbackForm() {
          const [formData, setFormData] = useState({
            name: '',
            email: '',
            rating: '',
            feedback: '',
          });
        
          const [error, setError] = useState('');
          const navigate = useNavigate();
        
          const handleChange = (e) => {
            const { name, value } = e.target;
            setFormData(prev => ({ ...prev, [name]: value }));
          };
        
          const handleSubmit = async (e) => {
            e.preventDefault();
            const { name, email, rating, feedback } = formData;
        
            if (!name || !email || !rating || !feedback) {
              setError("All fields are required");
              return;
            }
        
            try {
              await axios.post("http://localhost:3000/api/feedback", formData);
              setError('');
              navigate('/success'); // Redirect to success page
            } catch (err) {
              setError("Failed to submit feedback. Please try again.");
            }
          };
        
          return (
            <div className='min-h-screen flex items-center justify-center bg-gradient-to-r from-indigo-200 via-purple-200 to-pink-200 p-4'>
              <div className='bg-white shadow-lg rounded-lg p-8 w-full max-w-md'>
                <h2 className='text-2xl font-bold text-center text-indigo-600 mb-6'>Feedback Form</h2>
        
                {error && (
                  <p className='text-red-500 mb-4 text-center'>{error}</p>
                )}
        
                <form onSubmit={handleSubmit} className='space-y-4'>
                  <input
                    type="text"
                    name="name"
                    placeholder="Your Name"
                    className="w-full px-4 py-2 border border-gray-300 rounded"
                    value={formData.name}
                    onChange={handleChange}
                  />
        
                  <input
                    type="email"
                    name="email"
                    placeholder="Your Email"
                    className="w-full px-4 py-2 border border-gray-300 rounded"
                    value={formData.email}
                    onChange={handleChange}
                  />
        
                  <select
                    name="rating"
                    className="w-full px-4 py-2 border border-gray-300 rounded"
                    value={formData.rating}
                    onChange={handleChange}
                  >
                    <option value="">Rate us (1-5)</option>
                    <option value="1">1 - Poor</option>
                    <option value="2">2 - Fair</option>
                    <option value="3">3 - Good</option>
                    <option value="4">4 - Very Good</option>
                    <option value="5">5 - Excellent</option>
                  </select>
        
                  <textarea
                    name="feedback"
                    placeholder="Your Feedback"
                    rows="4"
                    className="w-full px-4 py-2 border border-gray-300 rounded"
                    value={formData.feedback}
                    onChange={handleChange}
                  ></textarea>
        
                  <button
                    type="submit"
                    className="w-full bg-indigo-600 text-white py-2 px-4 rounded hover:bg-indigo-700 transition"
                  >
                    Submit
                  </button>
                </form>
              </div>
            </div>
          );
        }
        
        export default FeedbackForm;
        
        ---

      üìÑ FeedbackList.jsx
        ---
        import React, { useEffect, useState } from 'react';
        import axios from 'axios';
        
        function FeedbackList() {
          const [feedbacks, setFeedbacks] = useState([]);
        
          useEffect(() => {
            axios.get('http://localhost:3000/api/feedbacks')
              .then(res => {
                setFeedbacks(res.data);
              })
              .catch(err => {
                console.error("Failed to fetch feedbacks:", err);
              });
          }, []);
        
          return (
            <div className="min-h-screen p-6 bg-gray-100">
              <h1 className="text-3xl font-bold text-center text-indigo-700 mb-6">All Feedbacks</h1>
        
              <div className="grid gap-4 max-w-3xl mx-auto">
                {feedbacks.length === 0 ? (
                  <p className="text-center text-gray-600">No feedbacks available yet.</p>
                ) : (
                  feedbacks.map((fb, index) => (
                    <div key={index} className="bg-white p-4 rounded shadow">
                      <p><span className="font-semibold">Name:</span> {fb.name}</p>
                      <p><span className="font-semibold">Email:</span> {fb.email}</p>
                      <p><span className="font-semibold">Rating:</span> {fb.rating}</p>
                      <p><span className="font-semibold">Feedback:</span> {fb.feedback}</p>
                      {fb.submittedAt && (
                        <p className="text-sm text-gray-500">Submitted: {new Date(fb.submittedAt).toLocaleString()}</p>
                      )}
                    </div>
                  ))
                )}
              </div>
            </div>
          );
        }
        
        export default FeedbackList;
        
        ---

      üìÑ SuccessPage.jsx
        ---
        import React from 'react';
        import { Link } from 'react-router-dom';
        
        function SuccessPage() {
          return (
            <div className="min-h-screen flex items-center justify-center bg-green-100 p-4">
              <div className="bg-white shadow-md p-6 rounded-lg text-center max-w-md">
                <h1 className="text-2xl font-bold text-green-600 mb-4">Form Submitted Successfully!</h1>
                <p className="mb-6">Thank you for your feedback.</p>
                <Link
                  to="/"
                  className="text-white bg-green-500 px-4 py-2 rounded hover:bg-green-600 transition"
                >
                  Go Back
                </Link>
              </div>
            </div>
          );
        }
        
        export default SuccessPage;
        
        ---

  üìÑ vite.config.js
    ---
    import { defineConfig } from 'vite'
    import tailwindcss from '@tailwindcss/vite'
    export default defineConfig({
      plugins: [
        tailwindcss(),
      ],
    })
    ---

üìÑ README.md
  ---
  # Feedback-Form-with-Backend
  ---


# Snapshot Summary
Total files processed: 13
